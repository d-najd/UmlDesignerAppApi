"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readDirRecursive = exports.writeFileAndDir = exports.createSymLink = void 0;
const fs_1 = require("fs");
const fs_extra_1 = require("fs-extra");
const promises_1 = require("fs/promises");
const path_1 = require("path");
async function createSymLink(
/**
 * Path that the symlink will link to. If relative, it will be linked relative to the symlink
 * location itself.
 */
linkPath, 
/** The location and name the symlink file itself. */
symlinkLocationPath, 
/** This is required to keep windows happy. If you're creating a symlink to a directory, set this to true. */
dir) {
    if ((0, fs_1.existsSync)(symlinkLocationPath)) {
        if (!(await (0, promises_1.lstat)(symlinkLocationPath)).isSymbolicLink()) {
            throw new Error(`Tried to create symlink at ${symlinkLocationPath} but a non-symlink file already existed in that location.`);
        }
        if ((await (0, promises_1.readlink)(symlinkLocationPath)) !== linkPath) {
            throw new Error(`Symlink already exists at ${symlinkLocationPath} but has a differently link path.`);
        }
    }
    else {
        await (0, promises_1.symlink)(linkPath, symlinkLocationPath, dir ? 'dir' : 'file');
    }
}
exports.createSymLink = createSymLink;
/** Writes to the given file path and always ensures that the path's parent directories are all created. */
async function writeFileAndDir(path, contents) {
    await (0, fs_extra_1.ensureDir)((0, path_1.dirname)(path));
    await (0, promises_1.writeFile)(path, contents);
}
exports.writeFileAndDir = writeFileAndDir;
async function internalReadDirPathsRecursive(dirPath, basePath) {
    const dirContents = await (0, promises_1.readdir)(dirPath);
    const recursiveContents = (await Promise.all(dirContents.map(async (fileName) => {
        const filePath = (0, path_1.join)(dirPath, fileName);
        if ((await (0, promises_1.stat)(filePath)).isDirectory()) {
            return internalReadDirPathsRecursive(filePath, basePath);
        }
        else {
            return (0, path_1.relative)(basePath, filePath);
        }
    }))).flat();
    return recursiveContents;
}
/**
 * Gets all files within a directory and its subdirectories, recursively. Returns an array of paths
 * relative to the input directory path.
 */
async function readDirRecursive(dirPath) {
    return await internalReadDirPathsRecursive(dirPath, dirPath);
}
exports.readDirRecursive = readDirRecursive;
