import { ArrayElement, UnPromise } from './type';
export declare function getEnumTypedKeys<T>(input: T): (keyof T)[];
export declare function getEnumTypedValues<T>(input: T): T[keyof T][];
export declare function isEnumValue<T extends object>(input: unknown, checkEnum: T): input is T[keyof T];
export declare function filterToEnumValues<T extends object>(inputs: unknown[], checkEnum: T, caseInsensitive?: boolean): T[keyof T][];
export declare function getObjectTypedKeys<T>(input: T): (keyof T)[];
export declare function getObjectTypedValues<T>(input: T): T[keyof T][];
export declare function typedHasOwnProperty<ObjectGeneric extends object, KeyGeneric extends PropertyKey>(inputKey: KeyGeneric, inputObject: ObjectGeneric): inputObject is ObjectGeneric & Record<KeyGeneric, unknown>;
export declare function typedHasOwnProperties<ObjectGeneric extends object, KeyGenerics extends PropertyKey[]>(inputKeys: KeyGenerics, inputObject: ObjectGeneric): inputObject is ObjectGeneric & Record<ArrayElement<KeyGenerics>, unknown>;
export declare function isObject(input: any): input is NonNullable<object>;
export declare function getEntriesSortedByKey(input: object): [string, unknown][];
export declare function areJsonEqual(a: object, b: object): boolean;
export declare type InnerMappedValues<EntireInputGeneric extends object, MappedValueGeneric> = {
    [MappedProp in keyof EntireInputGeneric]: MappedValueGeneric;
};
export declare type MappedValues<EntireInputGeneric extends object, MappedValueGeneric> = MappedValueGeneric extends PromiseLike<unknown> ? Promise<InnerMappedValues<EntireInputGeneric, UnPromise<MappedValueGeneric>>> : InnerMappedValues<EntireInputGeneric, UnPromise<MappedValueGeneric>>;
/**
 * Creates a new object with the same properties as the input object, but with values set to the
 * result of mapCallback for each property.
 */
export declare function mapObject<EntireInputGeneric extends object, MappedValueGeneric>(inputObject: EntireInputGeneric, mapCallback: (inputKey: keyof EntireInputGeneric, keyValue: EntireInputGeneric[typeof inputKey]) => MappedValueGeneric): MappedValues<EntireInputGeneric, MappedValueGeneric>;
/** The input here must be serializable otherwise JSON parsing errors will be thrown */
export declare function copyThroughJson<T>(input: T): T;
export declare type ObjectValueType<T extends object> = T[keyof T];
