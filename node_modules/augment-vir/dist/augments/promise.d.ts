export declare function wait(delayMs: number): Promise<void>;
export declare class PromiseTimeoutError extends Error {
    readonly durationMs: number;
    readonly message: string;
    readonly name = "PromiseTimeoutError";
    constructor(durationMs: number, message?: string);
}
export declare function wrapPromiseInTimeout<PromiseValueType>(durationMs: number, originalPromise: PromiseLike<PromiseValueType>): Promise<PromiseValueType>;
/** A promise which can be resolved or rejected by external code. */
export declare type DeferredPromiseWrapper<T> = {
    promise: Promise<T>;
    resolve: (value: T | PromiseLike<T>) => void;
    reject: (reason?: any) => void;
};
export declare function createDeferredPromiseWrapper<T = void>(): DeferredPromiseWrapper<T>;
